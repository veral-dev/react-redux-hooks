{"ast":null,"code":"var _jsxFileName = \"/Users/davidvrl/Desktop/Ironhack/react-redux-material/react-redux-hooks/src/pages/Results/index.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Container, CircularProgress } from '@material-ui/core';\nimport queryString from 'query-string';\nimport { searchMovie } from '../../redux/actions/search';\nimport { movieResults, isSearchLoading } from '../../redux/selectors';\nimport MovieResult from '../../components/MovieResult';\nexport default (({\n  location\n}) => {\n  const dispatch = useDispatch();\n  const movies = useSelector(state => movieResults(state));\n  const isLoading = useSelector(state => isSearchLoading(state));\n  console.log(movies);\n  useEffect(() => {\n    const {\n      movieName\n    } = queryString.parse(location.search);\n    if (movieName && !movies) dispatch(searchMovie({\n      movieName\n    }));\n  });\n\n  const renderMovies = () => {\n    if (movies) {\n      return movies.map((elm, index) => /*#__PURE__*/React.createElement(MovieResult, Object.assign({\n        key: index\n      }, elm, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 47\n        }\n      })));\n    } else {\n      return /*#__PURE__*/React.createElement(CircularProgress, {\n        size: 100,\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 20\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, renderMovies());\n});","map":{"version":3,"sources":["/Users/davidvrl/Desktop/Ironhack/react-redux-material/react-redux-hooks/src/pages/Results/index.js"],"names":["React","useEffect","useDispatch","useSelector","Container","CircularProgress","queryString","searchMovie","movieResults","isSearchLoading","MovieResult","location","dispatch","movies","state","isLoading","console","log","movieName","parse","search","renderMovies","map","elm","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,mBAA5C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAGA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,uBAA9C;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,gBAAe,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7B,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,MAAM,GAAGV,WAAW,CAACW,KAAK,IAAIN,YAAY,CAACM,KAAD,CAAtB,CAA1B;AACA,QAAMC,SAAS,GAAGZ,WAAW,CAACW,KAAK,IAAIL,eAAe,CAACK,KAAD,CAAzB,CAA7B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEiB,MAAAA;AAAF,QAAgBZ,WAAW,CAACa,KAAZ,CAAkBR,QAAQ,CAACS,MAA3B,CAAtB;AACA,QAAIF,SAAS,IAAI,CAACL,MAAlB,EAA0BD,QAAQ,CAACL,WAAW,CAAC;AAAEW,MAAAA;AAAF,KAAD,CAAZ,CAAR;AAC7B,GAHQ,CAAT;;AAKA,QAAMG,YAAY,GAAG,MAAM;AACvB,QAAIR,MAAJ,EAAY;AACR,aAAOA,MAAM,CAACS,GAAP,CAAW,CAACC,GAAD,EAAMC,KAAN,kBAAgB,oBAAC,WAAD;AAAa,QAAA,GAAG,EAAEA;AAAlB,SAA6BD,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA3B,CAAP;AACH,KAFD,MAEO;AACH,0BAAO,oBAAC,gBAAD;AAAkB,QAAA,IAAI,EAAE,GAAxB;AAA6B,QAAA,KAAK,EAAC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;AACJ,GAND;;AASA,sBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,YAAY,EADjB,CADJ;AAMH,CAzBD","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Container, CircularProgress } from '@material-ui/core'\nimport queryString from 'query-string'\n\n\nimport { searchMovie } from '../../redux/actions/search'\nimport { movieResults, isSearchLoading } from '../../redux/selectors'\nimport MovieResult from '../../components/MovieResult'\n\nexport default ({ location }) => {\n    const dispatch = useDispatch()\n    const movies = useSelector(state => movieResults(state))\n    const isLoading = useSelector(state => isSearchLoading(state))\n    console.log(movies)\n    useEffect(() => {\n        const { movieName } = queryString.parse(location.search)\n        if (movieName && !movies) dispatch(searchMovie({ movieName }))\n    })\n\n    const renderMovies = () => {\n        if (movies) {\n            return movies.map((elm, index) => <MovieResult key={index} {...elm} />)\n        } else {\n            return <CircularProgress size={100} color=\"primary\" />\n        }\n    }\n\n\n    return (\n        <Container>\n            {renderMovies()}\n        </Container>\n\n    )\n}"]},"metadata":{},"sourceType":"module"}